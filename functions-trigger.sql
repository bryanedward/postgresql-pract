create or replace function sumar(valor_a integer, valor_b integer) returns integer 
as 
$$
select valor_a + valor_b;
$$
language sql; 


create function insertarpersonas () returns void
as
$$
insert into users (nameuser,emailuser,gender)
values('james','jame@gmail.com', 'Male');
$$
language sql;


--trigger


--Examples

--Destroy the trigger if_dist_exists on the table films:
DROP TRIGGER if_dist_exists ON films;

-- Eliminar una funcion
DROP FUNCTION myFuncion();
DROP FUNCTION myFuncion(int);



--los triggers son perfectos cuando queremos aplicar en temas de auditorias
--funcion para respalda datos en la nueva tabla

--ejercicio uno guardar los primeros datos en una nueva tabla
--llamado backup_users.
create function save_datas() returns trigger
as
$$
begin
    insert into backup_users (nameuser, emailuser, gender)
    values(old.nameuser, old.emailuser, old.gender);
    return new;
end;
$$
language plpgsql;

CREATE TRIGGER user_update before UPDATE ON users
for each row
execute procedure save_datas();

CREATE TABLE backup_users (
    iduser INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    nameuser VARCHAR NOT NULL,
    emailuser text NOT NULL,
    gender VARCHAR NULL
);

update users set nameuser = 'karla',
emailuser = 'karla96@gmail.com',
gender = 'Female'
where iduser = 3;

insert into users (nameuser,emailuser,gender)
values('maho','maho@gmail.com', 'Female');


--ejercicio dos
--creacion de un trigger, cuando un nuevo usuario se crea genera una 
--tabla con la fecha, y hora de creacion en una tabla backup_users
CREATE TABLE backup_users (
    iduser INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    nameuser VARCHAR NOT NULL,
    emailuser text NOT NULL,
    gender VARCHAR NULL,
    datetoday DATE NULL,
    timetoday time NULL
);

CREATE FUNCTION save_user() RETURNS TRIGGER
AS
$$
DECLARE
delivery_date DATE  := CURRENT_DATE;
delivery_time time := current_time;
BEGIN
    insert into backup_users (nameuser, emailuser, gender, datetoday, timetoday)
    values(new.nameuser, new.emailuser, new.gender, delivery_date, delivery_time);
    return new;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER user_info before insert ON users
for each row
execute procedure save_user();

insert into users(nameuser, emailuser, gender)
values('mafer','mafer@gmail.com', 'Female');
