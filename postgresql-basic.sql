--abrir en consolo
sudo su - postgres

--horarios
select now()::date;
select now()::time;

-- SCRIPT DE LA BASE DE DATOS DE PSQL
DROP TABLE  users;
CREATE TABLE users;
DELETE FROM users;
UPDATE users set emailuser = 'pablo@gmail.com'  where iduser = 2;


--limit
--permite obetner un numero determinado de datos
select * from users limit 5;



--unique contrants crear y eliminar 
--permite asignar valores unicos en este ejemplo se toma en cuenta que los correos electronicos debe ser unicos
alter table users drop constraint users_emaiuser_key;
alter table users add constraint users_emailuser_key unique (emailuser);


--check contraints
--permite asignar valores por defectos como roles, estado civil o el sexo de la persona
alter table users add constraint gender_constraint CHECK (gender = 'Female'  or gender = 'Male');
alter table users drop constraint gender_constraint;


--order by  (ordenara alfabeticaemente dependiento de la columna que seleccione  junto con su tabla)
select * from users ORDER BY emailuser DESC;
select * from users ORDER BY emailuser ASC;


--los join solo aplican para unir dos tablas
--join unir dos tablas
select * from users inner join celulares on "userId" = iduser;
--left join unir dos tablas
select * from users left join celulares on users.iduser = celulares."userId":

--  where  , and , or 
select * from users where roleuser  =  'student'  and  (nameuser  =  'james' or nameuser = 'james') ;


--linit, offset , fetch
--obtener los 5 primero datos (limit)
select * from usersmoka limit 5;


--obtener de la posicion 5 los pirmeros diez datos hacia adelante (offset, fetch) 
select * from usersmoka offset 5 fetch first 10 row only;


--in 
--buscar el la tabla usermoka en la columna nameuser todos los jame y maria
select * from usersmoka where nameuser in ('jame' , 'maria'); 


CREATE TABLE IF NOT EXISTS users(
    iduser INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    nameuser VARCHAR NOT NULL,
    emailuser text NOT NULL UNIQUE,
    gender VARCHAR NULL,
    roleuser text NOT NULL,
    passuser text NOT NULL,
    photouser text NOT NULL
);
INSERT INTO  users (nameuser,emailuser,gender,roleuser,passuser,photouser) 
VALUES ('mario','bros@gmail.com','Male','admin','password','photo');

CREATE TABLE IF NOT EXISTS celulares(
    codigo INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    modelo VARCHAR  NULL,
    descript VARCHAR  NULL,
    "userId" INTEGER REFERENCES users(iduser)
);
INSERT INTO celulares(codigo, modelo, descript , "userId")
VALUES(1244,'SAMSUNG 10','CAMARA 12PX', 3);




--between 
--buscar datos entre un rango asignado
select * from usersmokacom where money between '$450' and '$600';

--like , ilike
--predomina el simbolo % para poder buscar entre las letras de las palabras con like la palabra deben ser identidicas aun sea con mayuscula o minuscula en cambio
-- ilike no afecta si la palabra esta con mayuscula o minuscula es muy util cuando queremos aplicar con un buscador basico. 
select * from usersmokacom where name like 'P%';
select * from usersmokacom where name like '%y';

--group by, distinct
--permite obtener todos los datos sin repetir pero no permite aplicar funciones como count(), max, min 
select distinct country from usersmokacom;
select country from usersmokacom group by country;


create table usersmokacom (
	id INT,
	name VARCHAR(50),
	money VARCHAR(50),
	sector VARCHAR(50),
	country VARCHAR(50)
);
insert into usersmokacom (id, name, money, sector, country) values (1, 'EnLink Midstream Partners, LP', '$6983.45', 'Public Utilities', 'Sierra Leone');

--having
--usamos la cláusula "having" para restringir las filas que devuelve una salida "group by". 
--Va siempre después de la cláusula "group by" y antes de la cláusula "order by" si la hubiere.
--  se aplica cuando queremos condiciones. cuando es menor o mayor a algo refernete.
select editorial, count(*) from libros
  group by editorial
  having count(*)>2;

--round lograr redondear un resultado y mostrar en el resultado cn una nueva columna 
select titulo, ROUND(precio) from libros;

-- coalesce te permite ingresar valor en campos nullos para mostrar 
select COALESCE(autor, 'autor desconocido') from libros;


 create table libros(
  codigo serial,
  titulo varchar(40),
  autor varchar(30),
  editorial varchar(15),
  precio decimal(5,2),
  cantidad smallint,
  primary key(codigo)
 );

 insert into libros(titulo,autor,editorial,precio,cantidad) values('El aleph','Borges','Planeta',35,null);
 insert into libros(titulo,autor,editorial,precio,cantidad) values('Martin Fierro','Jose Hernandez','Emece',22.20,200);